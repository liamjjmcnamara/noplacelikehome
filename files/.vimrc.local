
" Settings
set nonumber
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h11j
set nu!
set spell!
set sw=2
set wrap linebreak nolist
set ttyfast
set colorcolumn=81
set list
set clipboard=unnamed
set scrolloff=16 " Keep 3 lines below and above the cursor
set tabstop=2
set expandtab
set timeoutlen=300 ttimeoutlen=300
set ttimeoutlen=10
set nobackup
set tags=./tags;/
set tags+=~/code/id/tags
let Tlist_Show_One_File = 1


" Folding
set foldmethod=indent
set foldenable
set foldlevel=99
nnoremap <space> za
autocmd FileType c,cpp,h,hpp setlocal foldmethod=syntax

" Remaps
cmap w!! w !sudo tee % > /dev/null
nnoremap K kJ
nnoremap Q @q
nnoremap # *
vnoremap // y/<C-R>"<CR>
" buffer switching
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>d :bd<cr>
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
" tag jumping
nnoremap <leader>k <C-]>
nnoremap <leader>j <C-T>

" Prompt for a command to run map
map <Leader>vp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>
nnoremap <Leader>t :TagbarToggle<CR>
nnoremap <Leader>f :NERDTreeToggle<CR>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" File extension colouring
function! NERDTreeHighlightFile(extension, fg)
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
 exec 'autocmd filetype nerdtree highlight ' . a:extension . ' ctermfg='. a:fg .' guifg='. a:fg
endfunction
call NERDTreeHighlightFile('txt', 'white')
call NERDTreeHighlightFile('erl', 'yellow')
call NERDTreeHighlightFile('hrl', 'darkblue')
call NERDTreeHighlightFile('beam', 'darkgray')
call NERDTreeHighlightFile('log', 'darkgray')
call NERDTreeHighlightFile('html', 'blue')
call NERDTreeHighlightFile('mk', 'white')
call NERDTreeHighlightFile('Makefile', 'white')
call NERDTreeHighlightFile('md', 'gray')
call NERDTreeHighlightFile('config', 'darkred')
let g:NERDTreeStatusline="%{matchstr(getline('.'), '\\s\\zs\\w\\(.*\\)')}"
let g:NERDTreeBookmarksSort = 0
let g:NERDTreeWinSize    = 30
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeMinimalUI  = 1
let g:NERDTreeDirArrows  = 1
let g:NERDTreeShowHidden = 0
let g:tagbar_width = 30
let g:tagbar_sort  = 0
let g:necomplete#enable_at_startup = 1
let g:neocomplcache_disable_auto_complete = 0
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_auto_colors = 0
let g:indentLine_showFirstIndentLevel = "1"
let g:indentLine_concealcursor = ''
let g:indentLine_first_char    = '┊'
let g:indentLine_color_dark = 1 " (default: 2)
let g:indentLine_color_term = '239'
let g:indentLine_faster = '1'
let g:indentLine_char   = ' '
let g:AutoPairs = {}
let g:ale_sign_error   = '⤬'
let g:ale_sign_warning = '⚠'
let g:ale_echo_msg_error_str   = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_statusline_format = ['%d⤬', '%d⚠', '⬥ ok']
let g:ale_erlang_erlc_options = '-I../include -I../../*/include -I../.. -I../_build/default/lib -I/Users/liam.mcnamara/code/id -I/Users/liam.mcnamara/code/fredp'

let g:lt_location_list_toggle_map = '<Leader>l'
let g:lt_quickfix_list_toggle_map = '<Leader>x'

let g:airline_theme='distinguished'
"let g:airline_section_a =      '(mode, crypt, paste, spell, iminsert)'
"let g:airline_section_b =      (hunks, branch)
"let g:airline_section_c =      (bufferline or filename)
"let g:airline_section_gutter=  (readonly, csv)
"let g:airline_section_x =      '(tagbar, filetype, virtualenv)'
let g:airline_section_c = ''
let g:airline_section_y = '' "      (fileencoding, fileformat)
"let g:airline_section_z       (percentage, line number, column number)
let g:airline_section_error = '%q'
let g:airline#extensions#bufferline#enabled = 1

"ycm_error_count, syntastic, eclim)
let g:airline_section_warning = '%{ALEGetStatusLine()}'
"(ycm_warning_count, whitespace)

let g:airline#extensions#tabline#buffer_idx_mode = 1
"let g:airline#extensions#bufferline#overwrite_variables = 0
"let g:airline#extensions#tabline#buffer_nr_show = 1
"let g:bufferline_active_buffer_left = '['
"highlight bufferline_selected ctermfg=13
let g:bufferline_modified = '+'
" set alternate color for modified active/inactive tabs
"autocmd VimEnter *
"   \ let g:airline#themes#distinguished#palette.tabline = {
"   \    'airline_tabmod':       ['#f8f8f8','#780000',231,88,''],
"   \    'airline_tabmod_unsel': ['#dddddd','#463030',231,52,''],
"   \ } | :AirlineRefresh
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#show_close_button = 1
let g:airline#extensions#tabline#fnamemod     = ':t'
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs    = 0
let g:airline#extensions#tabline#tab_nr_type  = 1 " tab number
let g:airline#extensions#tabline#show_splits  = 1

" Line numbers
highlight ColorColumn  ctermbg=233
highlight LineNr       ctermbg=233 ctermfg=239
highlight CursorLineNr ctermbg=233 ctermfg=202
highlight CursorLine   ctermbg=233
highlight SpecialKey   ctermbg=233
" Sign column for Git
highlight clear SignColumn
highlight SignColumn ctermbg=233
highlight DiffAdd    ctermbg=233
highlight DiffDelete ctermbg=233
highlight DiffChange ctermbg=233
" Lint ale
highlight ALEErrorSign   ctermbg=233 ctermfg=1
highlight ALEWarningSign ctermbg=233 ctermfg=202

hi Directory           ctermfg='blue'
" popup menu
hi Pmenu     ctermbg=0 ctermfg=202
" popup selected
hi PmenuSel  ctermbg=202 ctermfg=0
hi PmenuSbar ctermbg=0 ctermfg=202

nnoremap <silent> <c-\><Left>   :TmuxNavigateLeft<cr>
nnoremap <silent> <c-\><Down>   :TmuxNavigateDown<cr>
nnoremap <silent> <c-\><Up>     :TmuxNavigateUp<cr>
nnoremap <silent> <c-\><Right>  :TmuxNavigateRight<cr>
nnoremap <silent> <c-\>h        :TmuxNavigateLeft<cr>
nnoremap <silent> <c-\>j        :TmuxNavigateDown<cr>
nnoremap <silent> <c-\>k        :TmuxNavigateUp<cr>
nnoremap <silent> <c-\>l        :TmuxNavigateRight<cr>
nnoremap <silent> <c-\><bslash> :TmuxNavigatePrevious<cr>
nnoremap <silent> <c-\><c-h>    :TmuxNavigateLeft<cr>

augroup FastEscape
  autocmd!
  au InsertEnter * set timeoutlen=0
  au InsertLeave * set timeoutlen=1000
augroup END

aug netrw_close
	au!
	au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "netrw"|q|endif
aug END

" Skeleton templates
augroup templates
  autocmd BufNewFile *.sh      0r ~/.vim/templates/skeleton.sh
  autocmd BufNewFile *.erl     0r ~/.vim/templates/skeleton.erl
  autocmd BufNewFile *.escript 0r ~/.vim/templates/skeleton.escript
augroup END

" filetype specifc
autocmd FileType erlang setlocal shiftwidth=0 tabstop=2 softtabstop=2 sw=2 ts=2 sts=2
autocmd FileType python setlocal shiftwidth=2 tabstop=2 noexpandtab
autocmd FileType nerdtree set norelativenumber
autocmd FileType netrw    set nonumber
autocmd FileType taglist  set nonumber norelativenumber

autocmd BufReadPost,FileReadPost,BufNewFile * call system("tmux rename-window \\<" . expand("%:t") . "\\>")
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=0
autocmd WinEnter,FocusGained * :setlocal relativenumber
autocmd WinLeave,FocusLost   * :setlocal norelativenumber
autocmd InsertEnter          * :setlocal norelativenumber
autocmd InsertLeave          * :setlocal relativenumber

"set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{v:servername}
autocmd BufEnter * let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"
autocmd BufEnter * call system("tmux rename-window \\<" . expand("%:t") . "\\>" )

"autocmd VimEnter * NeoCompleteEnable " Enable NeoComplete at startup
set runtimepath^=~/.vim/bundle/vim-erlang-omnicomplete
set omnifunc=syntaxcomplete#Complete


let &titlestring = expand("%:p")
set title
" Erlang
set runtimepath^=~/.vim/bundle/vim-erlang-runtime
set runtimepath^=/path/to/vim-erlang-tags

" this should reflect the kerl setting
set runtimepath^=/usr/local/erlang/kredotp/bin/erl

