set encoding=utf-8
scriptencoding utf-8

" Settings
set nonumber
set number!
set spell!
set shiftwidth=2
set wrap linebreak nolist
set colorcolumn=81
set list
set clipboard=unnamed
set scrolloff=16
set tabstop=2
set expandtab
set timeoutlen=300 ttimeoutlen=300
set ttimeoutlen=10
set nobackup
set ttyfast
set tags=./tags;/
set foldmethod=indent
set foldenable
set foldlevel=99
set wildmode=list:longest,full
set synmaxcol=130
let g:matchparen_timeout = 20
let g:matchparen_insert_timeout = 20
let &titlestring = expand('%:p')
set title

" Remaps
nnoremap ; :
cmap w!! w !sudo tee % > /dev/null
nnoremap <space> za
nnoremap K kJ
nnoremap Q @q
nnoremap # *
nnoremap n nzz
nnoremap N Nzz
nnoremap T y$
" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$
vnoremap // y/<C-R>"<CR>
" buffer switching
map <Leader>n :bn<cr>
map <Leader>p :bp<cr>
map <Leader>d :bd<cr>
map <Leader>u :UndotreeToggle<cr>
"nnoremap <Tab> :bnext<CR>
"nnoremap <S-Tab> :bprevious<CR>
" tag jumping
nnoremap <Leader>k <C-]>
nnoremap <Leader>j <C-T>

nnoremap <Left>  :echo "No left for you!"<CR>
nnoremap <Right> :echo "No right for you!"<CR>
nnoremap <Up>    :echo "No up for you!"<CR>
nnoremap <Down>  :echo "No down for you!"<CR>

" Prompt for a command to run map
map <Leader>vp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>
nnoremap <Leader>t :TagbarToggle<CR>
nnoremap <Leader>f :NERDTreeToggle<CR>

" File extension colouring
function! NERDTreeHighlightFile(extension, fg)
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
 exec 'autocmd filetype nerdtree highlight ' . a:extension . ' ctermfg='. a:fg .' guifg='. a:fg
endfunction
call NERDTreeHighlightFile('txt', 'white')
call NERDTreeHighlightFile('erl', 'yellow')
call NERDTreeHighlightFile('hrl', 'darkblue')
call NERDTreeHighlightFile('beam', 'darkgray')
call NERDTreeHighlightFile('log', 'darkgray')
call NERDTreeHighlightFile('html', 'blue')
call NERDTreeHighlightFile('mk', 'white')
call NERDTreeHighlightFile('Makefile', 'white')
call NERDTreeHighlightFile('md', 'gray')
call NERDTreeHighlightFile('config', 'darkred')
let g:NERDTreeStatusline="%{matchstr(getline('.'), '\\s\\zs\\w\\(.*\\)')}"
let g:NERDTreeBookmarksSort = 0
let g:NERDTreeWinSize    = 30
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeMinimalUI  = 1
let g:NERDTreeDirArrows  = 1
let g:NERDTreeShowHidden = 0
let g:tagbar_width = 30
let g:tagbar_sort  = 0
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_auto_colors = 0
let g:indentLine_showFirstIndentLevel = '1'
let g:indentLine_concealcursor = 1

let g:indentLine_first_char    = '│'
let g:indentLine_color_dark = 1 " (default: 2)
let g:indentLine_color_term = '239'
let g:indentLine_faster = '1'
let g:indentLine_char   = ' '
let g:AutoPairs = {}
let g:ale_sign_error   = '⤬'
let g:ale_sign_warning = '⚠'
let g:ale_echo_msg_error_str   = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_statusline_format = ['%d⤬', '%d⚠', '⬥ ok']
let g:ale_erlang_erlc_options = '-I../include  -I../_build/default/lib -I../_build/test/lib -I~/code/id -I~/code/fredp -I../..'

let g:lt_location_list_toggle_map = '<Leader>l'
let g:lt_quickfix_list_toggle_map = '<Leader>x'

let g:airline_theme='distinguished'
let g:airline_section_c = ''
let g:airline_section_y = '' "      (fileencoding, fileformat)
let g:airline_section_error = '%q'
let g:airline#extensions#bufferline#enabled = 1
let g:airline_section_warning = '%{ALEGetStatusLine()}'
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:bufferline_modified = '+'
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#show_close_button = 1
let g:airline#extensions#tabline#fnamemod     = ':t'
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs    = 0
let g:airline#extensions#tabline#tab_nr_type  = 1 " tab number
let g:airline#extensions#tabline#show_splits  = 1
let g:Tlist_Show_One_File = 1

" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~# 'iTerm.app'
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    let &t_SR = "\<esc>]50;CursorShape=2\x7" " Underline in replace mode
  endif
endif

" Line numbers
highlight LineNr       ctermbg=234 ctermfg=239
"highlight CursorLineNr ctermbg=234 ctermfg=239
"highlight CursorLineNr ctermbg=234 ctermfg=202
"highlight CursorLine   ctermbg=black
highlight SpecialKey   ctermbg=234
" Sign column for Git
highlight clear SignColumn
highlight SignColumn ctermbg=234
highlight DiffAdd    ctermbg=234
highlight DiffDelete ctermbg=234
highlight DiffChange ctermbg=234
" Lint ale
highlight ALEErrorSign   ctermbg=234 ctermfg=1
highlight ALEWarningSign ctermbg=234 ctermfg=202
" Syntastic
highlight Error ctermbg=234 ctermfg=202
highlight Warning ctermbg=234 ctermfg=200
highlight Todo ctermbg=234 ctermfg=208

highlight Directory ctermfg='blue'
" popup menu
highlight Pmenu     ctermbg=0 ctermfg=202
" popup selected
highlight PmenuSel  ctermbg=202 ctermfg=0
highlight PmenuSbar ctermbg=0 ctermfg=202
set norelativenumber
set nocursorline
set spellsuggest=best,10

inoremap jj <ESC>
map <CR> o<Esc>

nnoremap <silent> <c-\><Left>   :TmuxNavigateLeft<cr>
nnoremap <silent> <c-\><Down>   :TmuxNavigateDown<cr>
nnoremap <silent> <c-\><Up>     :TmuxNavigateUp<cr>
nnoremap <silent> <c-\><Right>  :TmuxNavigateRight<cr>
nnoremap <silent> <c-\>h        :TmuxNavigateLeft<cr>
nnoremap <silent> <c-\>j        :TmuxNavigateDown<cr>
nnoremap <silent> <c-\>k        :TmuxNavigateUp<cr>
nnoremap <silent> <c-\>l        :TmuxNavigateRight<cr>
nnoremap <silent> <c-\><bslash> :TmuxNavigatePrevious<cr>
nnoremap <silent> <c-\><c-h>    :TmuxNavigateLeft<cr>

nnoremap <Leader>y :FZF<cr>

nnoremap z= i<C-X><C-S>
unmap <Leader>q
"unmap <Leader>nt
"unmap <Leader>fu
" vimprompt
map <Leader>q :VimuxPromptCommand<CR>
map <Leader>w :call VimuxRunCommand("fc -e : -1")<CR>
map <Leader>W :VimuxRunLastCommand<CR>
" Generate tags and cscope
map <Leader>T :!tagscope<CR>

augroup FastEscape
  autocmd!
  au InsertEnter * set timeoutlen=0
  au InsertLeave * set timeoutlen=1000
  "au InsertEnter * hi Normal ctermfg=234
  "au InsertLeave * hi Normal ctermfg=232
augroup END

aug netrw_close
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "netrw"|q|endif
aug END

" Skeleton templates
augroup templates
  autocmd BufNewFile *.sh      0r ~/.vim/templates/skeleton.sh
  autocmd BufNewFile *.erl     0r ~/.vim/templates/skeleton.erl
  autocmd BufNewFile *.escript 0r ~/.vim/templates/skeleton.escript
  autocmd BufNewFile *.py      0r ~/.vim/templates/python.py
augroup END

augroup nerdtree
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
augroup END

augroup filetypes
  autocmd FileType c,cpp,h,hpp setlocal foldmethod=syntax
  autocmd FileType erlang setlocal shiftwidth=0 tabstop=2 softtabstop=2 sw=2 ts=2 sts=2
  autocmd FileType python setlocal shiftwidth=2 tabstop=2 noexpandtab
  autocmd FileType nerdtree set norelativenumber
  autocmd FileType netrw    set nonumber
  autocmd FileType taglist  set nonumber norelativenumber
augroup END

augroup tmux_integration
  autocmd BufReadPost,FileReadPost,BufNewFile * call system("tmux rename-window \\<" . expand("%:t") . "\\>")
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=0
  autocmd BufEnter * let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"
  autocmd BufEnter * call system("tmux rename-window \\<" . expand("%:t") . "\\>" )
augroup END

"nmap <leader><tab> <plug>(fzf-maps-n)

let g:minimap_show='<leader>M'
let g:minimap_update='minimap_update'
let g:minimap_close='minimap_close'
let g:minimap_toggle='minimap_toggle'
"augroup miniview
"  autocmd BufReadPost,FileReadPost,BufNewFile * call minimap#ShowMinimap()
"augroup END


let g:completor_python_binary = '/usr/bin/python'
let g:completor_erlang_omni_trigger = '.*'

"let g:asyncomplete_log_file='/tmp/asyn.log'
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

"call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    "\ 'name': 'buffer',
    "\ 'whitelist': ['*'],
    "\ 'blacklist': ['go'],
    "\ 'completor': function('asyncomplete#sources#buffer#completor'),
    "\ }))

"call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    "\ 'name': 'tags',
    "\ 'whitelist': ['*'],
    "\ 'completor': function('asyncomplete#sources#tags#completor'),
    "\ 'config': {
    "\    'max_file_size': 20000000,
    "\  },
    "\ }))
"call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
"\ 'name': 'omni',
"\ 'whitelist': ['*'],
"\ 'blacklist': ['html'],
"\ 'completor': function('asyncomplete#sources#omni#completor')
"\  }))
"call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
"\ 'name': 'omni',
"\ 'whitelist': ['*'],
"\ 'blacklist': ['html'],
"\ 'completor': function('asyncomplete#sources#omni#completor')
"\  }))


"augroup asyncomplete
"autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
"\ 'name': 'omni',
"\ 'whitelist': ['*'],
"\ 'completor': function('asyncomplete#sources#omni#completor')
"\  }))
"autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    "\ 'name': 'tags',
    "\ 'whitelist': ['*'],
    "\ 'completor': function('asyncomplete#sources#tags#completor'),
    "\ 'config': {
    "\    'max_file_size': 20000000,
    "\  },
    "\ }))
"augroup END
"let g:asyncomplete_remove_duplicates = 1

"inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

" Use deoplete.
let g:deoplete#enable_at_startup = 1
let g:tmuxcomplete#trigger = ''

let &runtimepath=&runtimepath . ',~/.vim/plugin'
" Erlang
set runtimepath^=~/.vim/bundle/vim-erlang-runtime
set runtimepath+=/usr/local/opt/fzf

"set runtimepath^=/path/to/vim-erlang-tags

" this should reflect the kerl setting
set runtimepath^=/usr/local/erlang/kredotp/bin/erl
