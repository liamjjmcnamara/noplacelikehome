
# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# split panes using | and -
unbind i
unbind -
unbind '"'
unbind %
bind-key i split-window -h -c "#{pane_current_path}"
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
bind-key / split-window -v -c "#{pane_current_path}"

# Set reload config
unbind r
bind-key r source-file ~/.tmux.conf\; display "Configuration reloaded."

unbind c
bind-key c new-window -ac "#{pane_current_path}"

bind-key -n M-Up copy-mode
bind-key -T copy-mode-vi v     send-keys -X begin-selection
#bind-key -T copy-mode-vi y     send -X      copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#bind-key -T copy-mode-vi Enter send -X      copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#bind-key ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

#bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; send-keys -X select-word \; \
    send-keys -X copy-pipe "xclip -in -sel primary"
bind-key -n DoubleClick1Pane \
    select-pane \; copy-mode -M \; send-keys -X select-word \; \
    send-keys -X copy-pipe "xclip -in -sel primary"

bind-key -r M-h resize-pane -L 5
bind-key -r M-j resize-pane -D 5
bind-key -r M-k resize-pane -U 5
bind-key -r M-l resize-pane -R 5
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Pane navigation
unbind l
# Move around panes like vim
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
#bind-key -n C-k "send-keys C-k" select-pane -U
#bind-key -n C-j "send-keys C-j" select-pane -D

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-Left  if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-Down  if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-Up    if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-Right if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\     if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

bind-key ^l last-window
bind-key ^n next-window
bind-key ^p previous-window
bind-key -n C-S swap-window -t +1
bind-key '<' swap-window -t -1
bind-key '>' swap-window -t +1

set -g history-limit 10000
set -sg escape-time 0

set -g mouse on
setw -g mode-keys vi

set -g focus-events on
set-option -g focus-events on

set-option -g default-shell /bin/zsh
#set -g default-command "reattach-to-user-namespace -l ${SHELL}"

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 5
set -g status-left-length 50
set -g status-left "#[bg=red]#{s/root//:client_key_table}"

#window mode
setw -g mode-style bg=colour250,fg=colour0
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on

# window status
set -g window-style fg=colour249,bg=colour235
set -g window-active-style fg=colour250,bg=black

setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "

# Info on left
set-option -g set-titles on
set -g set-titles-string '#{pane_current_path}'

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-option -g bell-action none
set-window-option -g monitor-activity off

set -g default-terminal "screen-256color"

# The modes
setw -g clock-mode-colour colour160
setw -g mode-style bg=colour160,fg=colour235,bold

# The panes
set -g pane-border-style fg=colour15,bg=colour233
set -g pane-active-border-style fg=colour33,bg=colour233

# The statusbar {
set -g status-position bottom
set -g status-style bg=colour233,fg=colour230 # gitstatus
set -g status-left '#[fg=colour230,bg=colour241,bold] %H:%M#[fg=colour241,bg=colour238,bold]##[fg=colour238,bg=colour235,bold]##[fg=colour235,bg=colour233,bold] '
#set -g status-right '#[fg=colour235,bold]#[fg=colour238,bg=colour235,bold]#[fg=colour241,bg=colour238,bold]#[fg=colour233,bg=colour241,bold]#[fg=colour243,bold]#[fg=colour230,bg=colour243,bold] #h #[fg=colour202,bold]❐ '
set -g status-right "#{tmux_mode_indicator}"
set -g status-right-length 90

# active window
setw -g window-status-current-style fg=colour33,bg=colour236,bold
setw -g window-status-current-format '▏#I #[fg=colour255]#{=25:window_name}#[fg=colour33]#F▕'

# inactive window
setw -g window-status-style fg=colour136,bg=colour237
setw -g window-status-format '▏#I #[fg=colour250]#{=25:window_name}#[fg=colour244]#[fg=colour136]#F▕'
setw -g window-status-bell-style fg=colour255,bg=colour1,bold

# The messages
set -g message-style fg=colour232,bg=colour166,bold

set-option -g repeat-time 300

set-window-option -ag word-separators "'"
set-window-option -g word-separators ' @"=()[]'

run-shell ~/.tmux/tmux_mode_indicator.sh

# Include host specific config
if-shell "[[ -f ~/.tmux.conf.local ]]" \
'source-file ~/.tmux.conf.local'
